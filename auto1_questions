/**
 * John Doe <john.doe@example.com>
 */
Write a class to produce above comment result from bellow code:

$user = new User();

$user->setFirstName('John')
    ->setLastName('Doe')
    ->setEmail('john.doe@example.com');

echo $user;
===============================================================================
There is a code supporting calculation if a car is damaged.
Now it should be extended to support calculating if a painting of car's exterior is damaged (this means, if a painting of any of car details is not OK - for example a door is scratched).

```
<?php

abstract class CarDetail {

    private $isBroken;

    public function __construct(bool $isBroken)
    {
        $this->isBroken = $isBroken;
    }

    public function isBroken(): bool
    {
        return $this->isBroken;
    }
}

class Door extends CarDetail
{
}

class Tyre extends CarDetail
{
}

class Car
{

    /**
     * @var CarDetail[]
     */
    private $details;

    /**
     * @param CarDetail[] $details
     */
    public function __construct(array $details)
    {
        $this->details = $details;
    }

    public function isBroken(): bool
    {
        foreach ($this->details as $detail) {

            if ($detail->isBroken()) {
                return true;
            }
        }

        return false;
    }

    public function isPaintingDamaged(): bool
    {
        // MAKE AN IMPLEMENTATION
    }
}

$car = new Car([new Door(true), new Tyre(false), ....]); // we pass a list of all details
```

Expected result: an implemented code.

Note: you are allowed (and encouraged) to change anything in the existing code in order to make an implementation SOLID compliant
=================================================================================================================================

NOTE: IT'S NOT A CODING TASK, JUST A SPECIFICATION AND PAYLOADS ARE NEEDED
Let's imagine we support a marketplace for selling bananas. On our platform any seller can add a lot with bananas. Each lot may have different weight, a country of origin, a date of harvesting and a cultivar.
After the lot is added, the seller may put it to an auction (with a certain duration, start date and an initial price), and once it has started - buyers may bid on the lot.

Please think of how an API should look like to support following features:

A) A seller "Delicious bananas LTD" (id=899) adds a lot of 'Red Dacca' (cultivar) bananas, planted at Costa Rica and harvested July 27, 2018 and a total weight of 1500 kg and succeed.
B) "Delicious bananas LTD" adds a lot of 'Red Dacca' (cultivar) bananas, planted at Costa Rica and harvested 27th July, 2018 and a total weight of 500 kg, but a minimum weight allowed is 1000 kg
C) "Delicious bananas LTD" changes harvesting date of created lot to June 14, 2018.
D) "Delicious bananas LTD" starts an auction on 04 Sep 2018 on the same lot with a cost $1.20/kg and duration 1 day.
E) A buyer "German Retailer GmbH" (id=72) bids on the same lot with a price $1.21/kg
F) "Delicious bananas LTD" wants to see a list of bids on his lot
G) "Delicious bananas LTD" wants to remove sold lot

Authentication, authorisation and registration for sellers and buyers is completely out of scope of the task.
API should be RESTful

Expected result: for every of 6 cases a payload, an URL of an endpoint, a status code and body of a response

Red Dacca bananas

===========================================================================================
Please take a look at the piece of code. We've got a class Fight, which implements a logic of a fight between two heroes. After the fight one of the hero may lose some health points.
Please make an implementation of a test for Fight::makeFight() method.

Feel free to refactor a code if you think it's needed.

<?php

interface HeroInterface
{

    public function getForce(): int;

    public function getImmunity(): int;

    public function getHealthPoints(): int;

    public function setHealthPoints(int $healthPoints);
}

class DamageHelper
{
    const DAMAGE_RAND_FACTOR = 0.2;

    public static function getDamage(HeroInterface $attacker, HeroInterface $defender)
    {
        if ($attacker->getForce() < $defender->getForce()) {
            return 0;
        }

        $damageBase = round(($attacker->getForce() - $defender->getForce()) / $defender->getImmunity());

        $damageFactor = $damageBase * self::DAMAGE_RAND_FACTOR;
        $minDamage    = $damageBase - $damageFactor;
        $maxDamage    = $damageBase + $damageFactor;

        return mt_rand($minDamage, $maxDamage);
    }
}

class Fight
{

    public function makeFight(HeroInterface $attacker, HeroInterface $defender)
    {
        $damage = DamageHelper::getDamage($attacker, $defender);
        $defender->setHealthPoints($defender->getHealthPoints()-$damage);
    }
}

class FightTest extends TestCase {

    public function testMakeFight()
    {
      // implement the test
    }
}


